#!/bin/bash
set -uo pipefail

#backup li run
#backup li

display_usage() {
	echo "Usage: $0 <repo> (local|local_without_cache|monitor|cleanup|unlock|forget|do_forget|init|rebuild_index <host> <warning> <critical>|restic arguments)" >&2
}

if [ "$#" -lt 2 ]; then
	display_usage
    	exit 1
fi


TARGET=$1
ACTION=$2
RESTIC="/usr/local/bin/restic"
CURL=$(which curl)

check_config() {
	CONFIG=/etc/backup/$1.repo
	if [ ! -f $CONFIG ]; then
	    	echo "Repo config file $CONFIG not found!"
    	    	exit 1
	else
		set -a
		source $CONFIG
		set +a
        fi


	if [[ ! -x $RESTIC ]]; then
    		echo "Restic binary not found"
    		exit 1
	fi


}

handle_params () {

	if [ $2 == "local" ]; then
    		do_local_backup
	elif [ $2 == "monitor" ]; then
		do_monitor $@
	elif [ $2 == "cleanup" ]; then
		do_cleanup
	elif [ $2 == "unlock" ]; then
		do_unlock
	elif [ $2 == "forget" ]; then
		list_forget
	elif [ $2 == "do_forget" ]; then
		do_forget
	elif [ $2 == "rebuild" ]; then
		do_rebuild
	elif [ $2 == "local_without_cache" ]; then
		do_backup_without_cache
	elif [ $2 == "init" ]; then
		do_init
	elif [ $2 == "rebuild_index" ]; then
		do_rebuild_index
	else
		shift 1
		$RESTIC $@
        fi
}


do_local_backup () {
        if [ ! -f /etc/backup/local.config ]; then
                echo "local backup config file $/etc/backup/local.config not found!"
                exit 1
        fi

	. /etc/backup/local.config

        if [[ -x /etc/backup/local.pre ]]; then
        	/etc/backup/local.pre $TARGET
 	fi

	$RESTIC --exclude-file /etc/backup/local.exclude backup --hostname $BACKUP_HOSTNAME $BACKUP_DIR

        if [[ -x /etc/backup/local.post ]]; then
                /etc/backup/local.post $TARGET
	fi

	if [[ -n "${HEALTHCHECK_URL:-}" ]]; then
		if [[ -x $CURL ]]; then
			$CURL -fsS --retry 4 "$HEALTHCHECK_URL"  > /dev/null
		fi
	fi
}

do_backup_without_cache () {
        if [ ! -f /etc/backup/local.config ]; then
                echo "local backup config file $/etc/backup/local.config not found!"
                exit 1
        fi

        . /etc/backup/local.config

        if [[ -x /etc/backup/local.pre ]]; then
                /etc/backup/local.pre $TARGET
        fi

        $RESTIC --no-cache --exclude-file /etc/backup/local.exclude backup --hostname $BACKUP_HOSTNAME $BACKUP_DIR

        if [[ -x /etc/backup/local.post ]]; then
                /etc/backup/local.post $TARGET
        fi

        if [[ -n "${HEALTHCHECK_URL:-}" ]]; then
                if [[ -x $CURL ]]; then
                        $CURL -fsS --retry 4 "$HEALTHCHECK_URL"  > /dev/null
                fi
        fi
}

do_cleanup () {

        . /etc/backup/local.config

	$RESTIC check --cleanup-cache
}

list_forget () {

        . /etc/backup/local.config

        $RESTIC forget --keep-daily 7 --keep-weekly 5 --keep-monthly 12

}

do_rebuild () {

	. /etc/backup/local.config

	$RESTIC rebuild-index
}

do_forget () {

	. /etc/backup/local.config

	$RESTIC forget --keep-daily 7 --keep-weekly 5 --keep-monthly 12 --prune

}

do_unlock () {
	. /etc/backup/local.config

        $RESTIC unlock
}

do_monitor () {
	if [ $# -lt 5 ]; then
		display_usage
		exit 1;
	fi
	WARN=$4
	CRIT=$5

	# Get last line and parse into variables. Removes header and is empty when no snapshot exists for host
	LAST=`$RESTIC snapshots --compact --no-lock -H $3 | sed 1,2d | head -n -2 | tail -n 1`
	if [ ! $? -eq 0 ]; then
		echo "WARNING - restic command returned an error"
		exit 1;
	fi

	IFS=' ' read HASH DATE TIME HOST DIR <<< "$LAST"

	if [ -z "$HASH" ]; then
		echo "UNKNOWN - No snapshot found for $3"
		exit 4;
	fi


	# Compute time difference since last snapshot
	case $(uname -s) in
		Darwin)
			BACKUP_TST=$(date -j -f "%Y-%m-%d %H:%M:%S" "$DATE $TIME" "+%s")
			;;
		*)
			BACKUP_TST=$(date -d "$DATE $TIME" +"%s" )
			;;
	esac
	NOW_TST=$(date +%s)
	DIFF_S=`expr $NOW_TST - $BACKUP_TST`

	DIFF_H=`expr $DIFF_S / 3600`

	MESSAGE="Last snapshot #$HASH ${DIFF_H}h ago"
        RET=0
	RET_H="OK"

	if [ $DIFF_H -lt $WARN ]; then
		RET=0
		RET_H="OK"
	elif [ $DIFF_H -lt $CRIT ]; then
                RET=1
                RET_H="WARNING"
	else
                RET=2
                RET_H="CRITICAL"

	fi
	echo "$RET_H - $MESSAGE"
	return $RET
}

do_init () {

	$RESTIC -r $RESTIC_REPOSITORY init

	if [[ $? == '1' ]]; then
	   echo 'Restic-Backup already initialized'
	   exit 0
	fi

}

do_rebuild_index () {

	$RESTIC rebuild-index

}


check_config $@
handle_params $@
